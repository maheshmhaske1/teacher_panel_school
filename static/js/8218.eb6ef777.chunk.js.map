{"version":3,"file":"static/js/8218.eb6ef777.chunk.js","mappings":"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","sources":["utility/api.js","views/exam/Exam.js","views/ownComponent/DataTable.js","views/ownComponent/FormsCustom.js"],"sourcesContent":["import axios from 'axios'\nimport Cookies from 'js-cookie'\n\n// const BASE_URL = 'http://localhost:5000'\n\n\nconst BASE_URL = 'https://backend-school-6sbi.onrender.com'\n\n\nexport const axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\n// Add the token to the headers if it exists in cookies\nconst setAuthorizationHeader = () => {\n  const bearerToken = Cookies.get('accessToken')\n  if (bearerToken) {\n    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${bearerToken}`\n  }\n}\n\n// Call this function to set the Authorization header\nsetAuthorizationHeader()\n\n\n// Add a response interceptor\naxiosInstance.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response && error.response.status === 401) {\n      window.location.href = '/admin-login'\n    }\n    return Promise.reject(error);\n  }\n);\n\n// --------loginUser-----------//\nexport const loginUser = async (userData) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/teacher/login`, userData)\n    if (response.data.success) {\n      // set token\n      const accessToken = response.data.data.token\n      // set the access token in cookie\n      Cookies.set('accessToken', accessToken, { secure: true, sameSite: 'strict' })\n\n      // set token\n      const name = response.data.data.teacherData.name\n      // set the access token in cookie\n      Cookies.set('name', name, { secure: true, sameSite: 'strict' })\n\n      const id = response.data.data.teacherData._id\n      Cookies.set('adminId', id, { secure: true, sameSite: 'strict' })\n\n      const orgId = response.data.data.teacherData.organization_id\n      Cookies.set('organizationId', orgId, { secure: true, sameSite: 'strict' })\n\n      setAuthorizationHeader();\n    }\n    return response.data\n  } catch (error) {\n    console.log(\"error\", error)\n    throw error\n  }\n}\n\n// --------renderOrganizationData-----------//\nexport const renderOrganizationData = async () => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/organization`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// --------renderOrganizationById-----------//\nexport const renderOrganizationById = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/organization/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// -------addOrganization-----------//\nexport const addOrganization = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/organization`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//--------deleteOrganizationData--------\nexport const deleteOrganizationData = async (id) => {\n  try {\n    const response = await axiosInstance.delete(`${BASE_URL}/organization/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//------editOrganization---------//\nexport const editOrganization = async (id, data) => {\n  try {\n    const response = await axiosInstance.patch(`${BASE_URL}/organization/${id}`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n\n// renderTeacherData\nexport const renderTeacherData = async () => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/teacher`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// renderTeacherByOrganization\nexport const renderTeacherByOrganization = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/teacher/by-organization/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// -------addTeacher-----------//\nexport const addTeacher = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/teacher`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//--------deleteTeacherData--------\nexport const deleteTeacherData = async (id) => {\n  try {\n    const response = await axiosInstance.delete(`${BASE_URL}/teacher/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//------editOrganization---------//\nexport const editTeacher = async (id, data) => {\n  try {\n    const response = await axiosInstance.patch(`${BASE_URL}/teacher/${id}`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n\n\n// --------renderLevelData-----------//\nexport const renderLevelData = async () => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/levels`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// -------addLevel-----------//\nexport const addLevel = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/levels`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//--------deleteLevelData--------\nexport const deleteLevelData = async (id) => {\n  try {\n    const response = await axiosInstance.delete(`${BASE_URL}/levels/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//------editLevel---------//\nexport const editLevel = async (id, data) => {\n  try {\n    const response = await axiosInstance.patch(`${BASE_URL}/levels/${id}`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n\n\n\n// --------renderQuestionData-----------//\nexport const renderQuestionData = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/question/by_level/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// -------addQuestion-----------//\nexport const addQuestion = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/question`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//--------deleteQuestionData--------\nexport const deleteQuestionData = async (id) => {\n  try {\n    const response = await axiosInstance.delete(`${BASE_URL}/question/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//------editQuestion---------//\nexport const editQuestion = async (id, data) => {\n  try {\n    const response = await axiosInstance.patch(`${BASE_URL}/question/${id}`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n\n\n// --------renderStudentData-----------//\nexport const renderStudentData = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/student`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// --------renderStudentDataByOrganization-----------//\nexport const renderStudentDataByOrganization = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/student/organization/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// -------addStudent-----------//\nexport const addStudent = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/student`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//--------deleteStudentData--------\nexport const deleteStudentData = async (id) => {\n  try {\n    const response = await axiosInstance.delete(`${BASE_URL}/student/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//------editQuestion---------//\nexport const editStudent = async (id, data) => {\n  try {\n    const response = await axiosInstance.patch(`${BASE_URL}/student/${id}`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n\n\n// --------renderExamData-----------//\nexport const renderExamData = async () => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/exam`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//renderExamDataById\nexport const renderExamDataById = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/exam/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//renderStudentExamData\nexport const renderStudentExamData = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/exam/get-exam-student-by-exam-id/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//removedStudentExamData\nexport const removedStudentExamData = async (id) => {\n  try {\n    const response = await axiosInstance.delete(`${BASE_URL}/exam/removed-student-from-exam/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n\n// -------addExam-----------//\nexport const addExam = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/exam`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//--------deleteExamData--------\nexport const deleteExamData = async (id) => {\n  try {\n    const response = await axiosInstance.delete(`${BASE_URL}/exam/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//------editExam---------//\nexport const editExam = async (id, data) => {\n  try {\n    const response = await axiosInstance.patch(`${BASE_URL}/exam/${id}`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// --------renderExamDataByOrganization-----------//\nexport const renderExamDataByOrganization = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/exam/by-organization-id/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n// --------renderExamQuestionData-----------//\nexport const renderExamQuestionData = async (id) => {\n  try {\n    const response = await axiosInstance.get(`${BASE_URL}/exam/get-exam-qestion-by-exam-id/${id}`)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//addStudentToExam\nexport const addStudentToExam = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/exam/add-exam-student`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}\n\n//addStudentToExam\nexport const renderNotExitStudent = async (data) => {\n  try {\n    const response = await axiosInstance.post(`${BASE_URL}/exam/organization-student-not-exit`, data)\n    return response.data\n  } catch (error) {\n    throw error\n  }\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport { FaEdit, FaTrash, FaEye } from \"react-icons/fa\";\nimport {\n    CButton,\n    CCol,\n    CForm,\n    CFormInput,\n    CFormFeedback,\n    CFormLabel,\n    CFormSelect,\n} from \"@coreui/react\";\nimport DataTable from \"../ownComponent/DataTable\";\nimport FormsCustom from \"../ownComponent/FormsCustom\";\nimport {\n    renderOrganizationData,\n    renderTeacherData,\n    addExam,\n    editExam,\n    deleteExamData,\n    renderExamData,\n    renderLevelData,\n    renderTeacherByOrganization,\n    renderExamDataByOrganization\n} from \"src/utility/api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport PropTypes from \"prop-types\";\nimport Swal from \"sweetalert2\";\nimport Select from \"react-select\";\nimport Cookies from 'js-cookie'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useNavigate } from 'react-router-dom'\n\nfunction Exam(props) {\n\n    const orgId = Cookies.get(\"organizationId\");\n\n    // all useState\n    const [data, setData] = useState([]);\n    const [editId, setEditId] = useState(null);\n    const [btnText, setBtnText] = useState(\"Add Examination\");\n    const [isTypeSelected, setIsTypeSelected] = useState(false);\n    const [isTypeSelectedOrganization, setIsTypeSelectedOrganization] = useState(false);\n    const [isTypeSelectedLevel, setIsTypeSelectedLevel] = useState(false);\n    const [organization_option, setOrganizationOption] = useState([]);\n    const [level_option, setLevelOption] = useState([]);\n    const [teacher_option, setTeacherOption] = useState([]);\n    const [isTypeSelectedTeacher, setIsTypeSelectedTeacher] = useState(false);\n    const [isTeacherDisabled, setIsTeacherDisabled] = useState(true);\n    const [isOrgDisabled, setIsOrgDisabled] = useState(false);\n\n\n\n    const navigate = useNavigate()\n    const created_by = Cookies.get('adminId')\n\n    const [formData, setFormData] = useState({\n        exam_name: \"\",\n        total_marks: \"\",\n        organization_id: orgId,\n        level_id: \"\",\n        created_by: created_by,\n        organization_value: null,\n        organization_id: orgId,\n        level_value: null,\n        level_id: null,\n        examDateTime: null,\n        examEndDateTime: null,\n        teacher_value: null,\n        teacher_id: null,\n        exam_duration: null,\n        duration_value: null\n\n    });\n\n    useEffect(() => {\n        renderData();\n        renderOrganization();\n        renderLevel();\n    }, []);\n\n\n\n\n    // render data\n    const renderData = async () => {\n\n        const response = await renderExamDataByOrganization(orgId);\n        if (response.success) {\n            setData(response.data);\n        }\n\n        renderTeacherData(orgId)\n        setIsTeacherDisabled(false)\n\n    };\n\n    // render organization\n    const renderOrganization = async () => {\n        const response = await renderOrganizationData();\n        console.log(response);\n        if (response.success) {\n            response.data.map((org) => {\n                org.label = org.name;\n                org.value = org._id;\n            });\n            setOrganizationOption(response.data);\n        }\n    };\n\n    // render level\n    const renderLevel = async () => {\n\n        const response = await renderLevelData();\n        console.log(response);\n        if (response.success) {\n            response.data.map((org) => {\n                org.label = org.name;\n                org.value = org._id;\n            });\n            setLevelOption(response.data);\n        }\n    };\n    const renderTeacherData = async (id) => {\n        const response = await renderTeacherByOrganization(orgId);\n        console.log(response);\n        if (response.success) {\n            response.data.map((org) => {\n                org.label = org.name;\n                org.value = org._id;\n            });\n            setTeacherOption(response.data);\n        }\n    }\n\n    //edit Student\n    const handleEdit = (id) => {\n        setBtnText(\"Update Examination\");\n        const studentToUpdate = data.find((org) => org._id === id);\n        console.log(studentToUpdate);\n\n        // Extract date and time from examDateTime \n        const examDateTime = new Date(studentToUpdate.examDateTime);\n        const examEndDateTime = new Date(studentToUpdate.examEndDateTime);\n\n\n        setEditId(studentToUpdate._id);\n        setIsTeacherDisabled(false);\n        setIsOrgDisabled(true);\n        setFormData({\n            exam_name: studentToUpdate.exam_name,\n            total_marks: studentToUpdate.total_marks,\n            organization_value: {\n                value: studentToUpdate.organization_id._id,\n                label: studentToUpdate.organization_id.name,\n            },\n            organization_id: studentToUpdate.organization_id._id,\n            level_value: {\n                value: studentToUpdate.level_id._id,\n                label: studentToUpdate.level_id.name,\n            },\n            level_id: studentToUpdate.level_id._id,\n            duration_value: {\n                value: studentToUpdate.exam_duration,\n                label: studentToUpdate.exam_duration,\n            },\n            exam_duration: studentToUpdate.exam_duration,\n\n            teacher_value: {\n                value: studentToUpdate.teacher_id._id,\n                label: studentToUpdate.teacher_id.name,\n            },\n            teacher_id: studentToUpdate.teacher_id._id,\n            examDateTime: examDateTime,\n            examEndDateTime: examEndDateTime\n        });\n    };\n\n\n    // Delete Exam\n    const handleDelete = async (id) => {\n        const confirmDelete = await Swal.fire({\n            title: \"Are you sure?\",\n            text: \"You will not be able to recover this student!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#d33\",\n            cancelButtonColor: \"#3085d6\",\n            confirmButtonText: \"Yes, delete it!\",\n        });\n\n        if (confirmDelete.isConfirmed) {\n            try {\n                const response = await deleteExamData(id);\n                if (response.success) {\n                    toast.success(response.message, {\n                        position: toast.POSITION.TOP_RIGHT,\n                        autoClose: 3000,\n                    });\n                    renderData();\n                }\n            } catch (error) {\n                toast.error(error.message, {\n                    position: toast.POSITION.TOP_RIGHT,\n                    autoClose: 3000,\n                });\n            }\n        }\n    };\n\n    // handleExamView\n    const handleExamView = async (id) => {\n        console.log(id)\n        navigate(`/examination-info/${id}`);\n    }\n\n    const columns = [\n        { Header: \"Exam Name\", accessor: \"exam_name\" },\n        { Header: \"Level Name\", accessor: \"level_id.name\" },\n        { Header: \"Organization Name\", accessor: \"organization_id.name\" },\n        { Header: \"Incharge Teacher\", accessor: \"teacher_id.name\" },\n        { Header: \"Exam Duration\", accessor: \"exam_duration\" },\n        { Header: \"Total Marks\", accessor: \"total_marks\" },\n        {\n            Header: \"Exam Start Date & Time\",\n            accessor: \"examDateTime\",\n            Cell: ({ value }) => {\n                // Format the date\n                const formattedDate = new Date(value).toLocaleDateString(\"en-GB\", {\n                    day: \"numeric\",\n                    month: \"short\",\n                    year: \"numeric\",\n                });\n\n                // Format the time\n                const formattedTime = new Date(value).toLocaleTimeString(\"en-US\", {\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                    hour12: true,\n                });\n\n                return `${formattedDate} ${formattedTime}`;\n            },\n        },\n        {\n            Header: \"Exam End Date & Time\",\n            accessor: \"examEndDateTime\",\n            Cell: ({ value }) => {\n                // Format the date\n                const formattedDate = new Date(value).toLocaleDateString(\"en-GB\", {\n                    day: \"numeric\",\n                    month: \"short\",\n                    year: \"numeric\",\n                });\n\n                // Format the time\n                const formattedTime = new Date(value).toLocaleTimeString(\"en-US\", {\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                    hour12: true,\n                });\n\n                return `${formattedDate} ${formattedTime}`;\n            },\n        },\n        { Header: \"Created By\", accessor: \"created_by.admin_name\" },\n        {\n            Header: \"Created At\",\n            accessor: \"createdAt\",\n            Cell: ({ value }) => {\n                // Format the date\n                const formattedDate = new Date(value).toLocaleDateString(\"en-GB\", {\n                    day: \"numeric\",\n                    month: \"short\",\n                    year: \"numeric\",\n                });\n\n                // Format the time\n                const formattedTime = new Date(value).toLocaleTimeString(\"en-US\", {\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                    hour12: true,\n                });\n\n                return `${formattedDate} ${formattedTime}`;\n            },\n        },\n        {\n            Header: \"Schedule\",\n            accessor: \"is_schedule\",\n            Cell: ({ value }) => (\n                <CButton\n                    color={value ? \"success\" : \"danger\"}\n                    size=\"sm\"\n                    style={{ color: \"white\", borderRadius: \"20px\", minWidth: \"110px\" }} // Set a fixed width\n                >\n                    {value ? \"Schedule\" : \"Not Schedule\"}\n                </CButton>\n            ),\n        },\n        {\n            Header: \"Status\",\n            accessor: \"\",\n            Cell: ({ row }) => {\n                // const endDate = new Date(row.original.examEndDateTime);\n                // const currentDate = new Date();\n\n                // if (endDate > currentDate) {\n                //     return \"Upcoming\";\n                // } else if (endDate.getDate() === currentDate.getDate()) {\n                //     setIsExamDone(true);\n                //     return \"Ongoing\";\n                // } else {\n                //     setIsExamDone(true);\n                //     return \"Completed\";\n                // }\n\n\n\n                const startDate = new Date(row.original.examDateTime);\n                const endDate = new Date(row.original.examEndDateTime);\n                const currentDate = new Date();\n\n                if (currentDate < startDate) {\n                    return \"Upcoming.\";\n                } else if (currentDate >= startDate && currentDate <= endDate) {\n                    // setIsExamDone(true);\n                    return \"Ongoing.\";\n                } else {\n                    // setIsExamDone(true);\n                    return \"Completed.\";\n                }\n            },\n        },\n\n        {\n            Header: \"Actions\",\n            accessor: \"_id\", // Assuming you have an 'id' property in your teacher data\n            Cell: ({ row }) =>\n            // (\n           \n            {\n              \n                return (\n                    <>\n                        <CButton\n                            color=\"success\"\n                            size=\"sm\"\n                            style={{ color: \"white\" }}\n                            onClick={() => handleExamView(row.original._id)}\n                        >\n                            <FaEye /> View Details\n                        </CButton>{\" \"}\n                    </>\n                );\n            }\n        },\n    ];\n\n \n    return (\n        <>\n            {/* <FormsCustom customStyles={CustomStyles} title=\"Examination Master\" /> */}\n            <DataTable columns={columns} data={data} />\n        </>\n    );\n}\n\nexport default Exam;\n\nExam.propTypes = {\n    row: PropTypes.shape({\n        original: PropTypes.shape({\n            _id: PropTypes.number.isRequired,\n        }),\n    }),\n};\n","// DataTable.js\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTable, usePagination, useSortBy, useGlobalFilter } from 'react-table'\nimport { Table, FormControl, Button } from 'react-bootstrap'\n// import { useState } from 'react'\nimport * as XLSX from 'xlsx'\nimport './DataTable.css' // Import the CSS file\n\nconst DataTable = ({ columns, data, name }) => {\n  // const [tablePageSize, setTablePageSize] = useState(10)\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    state: { pageIndex, pageSize, globalFilter },\n    setGlobalFilter,\n    gotoPage,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 10 }, // Set initial pageSize to tablePageSize\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  )\n\n  const downloadExcel = () => {\n    const excelData = data.map((row) =>\n      columns.reduce((acc, column) => {\n        acc[column.Header] = row[column.accessor]\n        return acc\n      }, {}),\n    )\n\n    const ws = XLSX.utils.json_to_sheet(excelData)\n    const wb = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet 1')\n    XLSX.writeFile(wb, 'data.xlsx')\n  }\n\n  return (\n    <div className=\"data-table-container\">\n        <h5>{name?name:\"\"}</h5>\n      <div className=\"data-table-header\">\n        <div className=\"search-box-container\">\n          <FormControl\n            type=\"text\"\n            value={globalFilter || ''}\n            onChange={(e) => setGlobalFilter(e.target.value)}\n            placeholder=\"Search...\"\n          />\n          <span className=\"search-icon\">&#x1F50D;</span>\n        </div>\n        <Button onClick={() => downloadExcel()} className='download_excel' variant=\"success\" style={{ color: 'white' }}>\n          Download Excel\n        </Button>\n      </div>\n      <div className=\"table-wrapper\">\n      <Table {...getTableProps()} bordered hover responsive>\n        <thead>\n          <tr>\n            <th>Sr. No.</th>\n            {headerGroups.map((headerGroup) => (\n              <React.Fragment key={headerGroup._id}>\n                {headerGroup.headers.map((column) => (\n                  <th key={column._id} {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    <span>{column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}</span>\n                  </th>\n                ))}\n              </React.Fragment>\n            ))}\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr key={row._id} {...row.getRowProps()}>\n                <td>{pageIndex * pageSize + i + 1}</td>\n                {row.cells.map((cell) => (\n                  <td key={cell.column._id} {...cell.getCellProps()}>\n                    {cell.render('Cell')}\n                  </td>\n                ))}\n              </tr>\n            )\n          })}\n        </tbody>\n      </Table>\n      </div>\n     \n      <div className=\"pagination-controls\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>\n        <button onClick={() => gotoPage(page.length - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>\n        <span>\n          &nbsp;Page <strong>{pageIndex + 1}</strong>{' '}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nDataTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n}\n\nexport default DataTable\n","// FormsCustom.js\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\n\nconst FormsCustom = ({ customStyles, title }) => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>{title}</strong>\n          </CCardHeader>\n          <CCardBody>\n            {/* Call the customStyles function if it's provided */}\n            {customStyles ? customStyles() : null}\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\n// Add prop validation\nFormsCustom.propTypes = {\n  customStyles: PropTypes.func, // Ensure customStyles is a function\n  title: PropTypes.func, // Ensure customStyles is a function\n}\n\nexport default FormsCustom\n"],"names":["BASE_URL","axiosInstance","axios","create","baseURL","headers","setAuthorizationHeader","bearerToken","Cookies","get","defaults","common","concat","interceptors","response","use","error","status","window","location","href","Promise","reject","loginUser","async","post","userData","data","success","accessToken","token","set","secure","sameSite","name","teacherData","id","_id","orgId","organization_id","console","log","renderOrganizationData","renderTeacherByOrganization","addTeacher","deleteTeacherData","delete","editTeacher","patch","renderLevelData","renderStudentDataByOrganization","addStudent","deleteStudentData","editStudent","renderExamDataById","renderStudentExamData","removedStudentExamData","deleteExamData","renderExamDataByOrganization","addStudentToExam","renderNotExitStudent","props","setData","useState","editId","setEditId","btnText","setBtnText","isTypeSelected","setIsTypeSelected","isTypeSelectedOrganization","setIsTypeSelectedOrganization","isTypeSelectedLevel","setIsTypeSelectedLevel","organization_option","setOrganizationOption","level_option","setLevelOption","teacher_option","setTeacherOption","isTypeSelectedTeacher","setIsTypeSelectedTeacher","isTeacherDisabled","setIsTeacherDisabled","isOrgDisabled","setIsOrgDisabled","navigate","useNavigate","created_by","formData","setFormData","exam_name","total_marks","level_id","organization_value","level_value","examDateTime","examEndDateTime","teacher_value","teacher_id","exam_duration","duration_value","useEffect","renderData","renderOrganization","renderLevel","renderTeacherData","map","org","label","value","columns","Header","accessor","Cell","_ref","formattedDate","Date","toLocaleDateString","day","month","year","formattedTime","toLocaleTimeString","hour","minute","hour12","_ref2","_ref3","_ref4","_jsx","CButton","color","size","style","borderRadius","minWidth","children","_ref5","row","startDate","original","endDate","currentDate","_ref6","_jsxs","_Fragment","onClick","handleExamView","FaEye","DataTable","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","state","pageIndex","pageSize","globalFilter","setGlobalFilter","gotoPage","nextPage","previousPage","canNextPage","canPreviousPage","useTable","initialState","useGlobalFilter","useSortBy","usePagination","className","FormControl","type","onChange","e","target","placeholder","Button","downloadExcel","excelData","reduce","acc","column","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","variant","Table","bordered","hover","responsive","headerGroup","React","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","i","getRowProps","cells","cell","getCellProps","disabled","length","customStyles","title","CRow","CCol","xs","CCard","CCardHeader","CCardBody"],"sourceRoot":""}